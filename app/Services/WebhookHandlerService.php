<?php

namespace App\Services;

use App\Models\TelegramUser;
use App\Models\Birthday;
use App\Enums\GreetingStyleEnum;
use App\Services\ZodiacService;

class WebhookHandlerService
{
    private TelegramBotService $telegramBot;
    private BirthdayService $birthdayService;
    private UserStateService $stateService;

    public function __construct(
        TelegramBotService $telegramBot,
        BirthdayService $birthdayService,
        UserStateService $stateService
    ) {
        $this->telegramBot = $telegramBot;
        $this->birthdayService = $birthdayService;
        $this->stateService = $stateService;
    }

    public function getTelegramBot(): TelegramBotService
    {
        return $this->telegramBot;
    }

    public function handleUpdate($update): void
    {
        if ($update->isType('message')) {
            $this->handleMessage($update->getMessage());
        } elseif ($update->isType('callback_query')) {
            $this->handleCallbackQuery($update->getCallbackQuery());
        }
    }

    private function handleMessage($message): void
    {
        $userId = $message->getFrom()->getId();
        $chatId = $message->getChat()->getId();
        $text = trim($message->getText());

        // Save user and chat_id
        TelegramUser::updateOrCreate(
            ['user_id' => $userId],
            ['chat_id' => $chatId]
        );

        if ($text === '/add') {
            $this->stateService->setState($userId, 'awaiting_name');
            $this->telegramBot->sendMessage($chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞:");
            return;
        }

        if ($text === '/list') {
            $this->birthdayService->listBirthdays($userId, $chatId);
            return;
        }

        if ($text === '/upcoming') {
            $this->birthdayService->showUpcomingBirthdays($userId, $chatId);
            return;
        }

        if ($text === '/info') {
            $this->stateService->setState($userId, 'awaiting_info_input');
            $this->telegramBot->sendMessage($chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM-DD –∏–ª–∏ YYYY-MM-DD, –ª–∏–±–æ –∏–º—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞, –ª–∏–±–æ telegram username:");
            return;
        }

        if ($text === '/check') {
            $notificationService = new \App\Services\NotificationService($this->telegramBot);
            $todayBirthdays = $notificationService->getTodaysBirthdays();
            $tomorrowBirthdays = $notificationService->getTomorrowBirthdays();
            $totalBirthdays = count($todayBirthdays) + count($tomorrowBirthdays);
            if ($totalBirthdays === 0) {
                $this->telegramBot->sendMessage(
                    $chatId,
                    '–°–µ–≥–æ–¥–Ω—è-–∑–∞–≤—Ç—Ä–∞ –Ω–∏–∫–∞–∫–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /upcoming'
                );
            } else {
                $notificationService->sendDailyBirthdayNotifications();
            }
            return;
        }

        $state = $this->stateService->getState($userId);

        if ($state && $state['state'] === 'awaiting_name') {
            $this->stateService->updateStateWithTempName($userId, $text, 'awaiting_username');
            $this->telegramBot->sendMessage(
                $chatId,
                '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram username –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ (—Å @ –∏–ª–∏ –±–µ–∑) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:'
            );
            return;
        }

        if ($state && $state['state'] === 'awaiting_username') {
            $input = trim($text);

            if ($input === '/skip') {
                // Skip username step
                $this->stateService->updateStateWithTempNameAndUsername(
                    $userId,
                    $state['temp_name'],
                    null,
                    'awaiting_date'
                );
                $this->telegramBot->sendMessage(
                    $chatId,
                    'Username –ø—Ä–æ–ø—É—â–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –ú–ú-–î–î:'
                );
                return;
            }

            if (empty($input)) {
                $this->telegramBot->sendMessage(
                    $chatId,
                    '‚ùå –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ Telegram username (—Å @ –∏–ª–∏ –±–µ–∑).'
                        . PHP_EOL . '–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.'
                );
                return;
            }

            // Normalize username (remove @ if present)
            $normalizedUsername = $this->normalizeUsername($input);

            // Save normalized username
            $this->stateService->updateStateWithTempNameAndUsername(
                $userId,
                $state['temp_name'],
                $normalizedUsername,
                'awaiting_date'
            );
            $this->telegramBot->sendMessage(
                $chatId,
                '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –ú–ú-–î–î:'
            );
            return;
        }

        if ($state && $state['state'] === 'awaiting_date') {
            if (!$this->birthdayService->validateDate($text)) {
                $this->telegramBot->sendMessage(
                    $chatId,
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –ú–ú-–î–î:'
                );
                return;
            }

            // Normalize date to YYYY-MM-DD format
            $normalizedDate = $this->birthdayService->normalizeDate($text);

            $this->birthdayService->addBirthday(
                $userId,
                $chatId,
                $state['temp_name'],
                $state['temp_username'],
                null,
                $normalizedDate
            );
            $this->stateService->clearState($userId);
            return;
        }

        if ($state && $state['state'] === 'awaiting_info_input') {
            $input = trim($text);
            if (empty($input)) {
                $this->telegramBot->sendMessage(
                    $chatId,
                    '‚ùå –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM-DD –∏–ª–∏ YYYY-MM-DD, –ª–∏–±–æ –∏–º—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞, –ª–∏–±–æ telegram username:'
                );
                return;
            }

            try {
                $zodiacService = new ZodiacService();
                $result = $zodiacService->getZodiacInfo($input);

                $message = "üîÆ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞*\n\n";
                $message .= "üìÖ –î–∞—Ç–∞: " . $result['date'] . "\n";

                if (isset($result['name'])) {
                    $message .= "üë§ –ò–º—è: " . $result['name'] . "\n";
                }

                $message .= "‚ôà –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: " . $result['zodiac_sign'] . "\n";

                if (isset($result['additional_info'])) {
                    $message .= "\nüìä *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n";
                    $message .= "üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: " . $result['additional_info']['day_of_week'] . "\n";
                    $message .= "üêâ –ö–∏—Ç–∞–π—Å–∫–∏–π –∑–æ–¥–∏–∞–∫: " . $result['additional_info']['chinese_zodiac'] . "\n";
                    $message .= "üåô –§–∞–∑–∞ –ª—É–Ω—ã: " . $result['additional_info']['moon_phase'] . "\n";
                }

                $this->telegramBot->sendMessage($chatId, $message, ['parse_mode' => 'Markdown']);
            } catch (\Exception $e) {
                $this->telegramBot->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            }

            $this->stateService->clearState($userId);
            return;
        }

        if ($state && $state['state'] === 'awaiting_greeting_style') {
            $style = trim($text);
            if (empty($style)) {
                $this->telegramBot->sendMessage(
                    $chatId,
                    '‚ùå –°—Ç–∏–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:'
                );
                return;
            }

            try {
                $openAIService = new OpenAIService();
                $greeting = $openAIService->generateBirthdayGreeting($state['temp_name'], $style);

                // Send greeting to birthday person
                $birthdayChatId = $this->getChatIdByUsername($state['temp_username']);
                if ($birthdayChatId) {
                    $this->telegramBot->sendMessage($birthdayChatId, $greeting);
                    $this->telegramBot->sendMessage($chatId, 'ü§ñ –ò–ò-–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                } else {
                    // If chat_id not found, send to current chat with mention
                    $greetingWithMention = $greeting . PHP_EOL . PHP_EOL . 'https://t.me/' . $state['temp_username'];
                    $this->telegramBot->sendMessage($chatId, $greetingWithMention, ['parse_mode' => 'Markdown']);
                    $this->telegramBot->sendMessage($chatId, 'ü§ñ –ò–ò-–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!');
                }
            } catch (\Exception $e) {
                $this->telegramBot->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: ' . $e->getMessage());
            }

            $this->stateService->clearState($userId);
            return;
        }

        $this->telegramBot->sendMessage($chatId, '–ö–æ–º–∞–Ω–¥—ã:'
            . PHP_EOL . '/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞'
            . PHP_EOL . '/list ‚Äî —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ'
            . PHP_EOL . '/upcoming ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è'
            . PHP_EOL . '/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞'
            . PHP_EOL . '/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞');
    }

    private function handleCallbackQuery($callback): void
    {
        $data = $callback->getData();
        $userId = $callback->getFrom()->getId();
        $chatId = $callback->getMessage()->getChat()->getId();

        if (preg_match('/^delete_(\d+)$/', $data, $matches)) {
            $id = (int) $matches[1];
            $this->birthdayService->deleteBirthday($id, $userId, $chatId, $callback->getId());
        }

        if (preg_match('/^greet_simple_(\d+)$/', $data, $m)) {
            $birthdayId = (int) $m[1];
            $birthday = Birthday::find($birthdayId);
            if ($birthday) {
                $greeting = $birthday->name . ', —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ' . PHP_EOL . '–ñ–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, —Ä–∞–¥–æ—Å—Ç–∏, –ª—é–±–≤–∏ –∏ —Ç–µ–ø–ª–∞!';
                $birthdayChatId = $birthday->birthday_chat_id;
                if ($birthdayChatId) {
                    $this->telegramBot->sendMessage($birthdayChatId, $greeting);
                    $this->telegramBot->answerCallbackQuery($callback->getId(), 'üì® –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                } else {
                    $greetingWithMention = $greeting;
                    if ($birthday->telegram_username) {
                        $greetingWithMention .= PHP_EOL . PHP_EOL . 'https://t.me/' . $birthday->telegram_username;
                    }
                    $this->telegramBot->sendMessage($chatId, $greetingWithMention, ['parse_mode' => 'Markdown']);
                    $this->telegramBot->answerCallbackQuery($callback->getId(), 'üì® –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!');
                }
            } else {
                $this->telegramBot->answerCallbackQuery($callback->getId(), '‚ùå –ò–º–µ–Ω–∏–Ω–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        }

        if (preg_match('/^greet_ai_(\d+)$/', $data, $m)) {
            $birthdayId = (int) $m[1];
            $birthday = Birthday::find($birthdayId);
            if ($birthday) {
                // Set state to await greeting style
                $this->stateService->updateStateWithTempNameAndUsername(
                    $userId,
                    $birthday->name,
                    $birthday->telegram_username,
                    'awaiting_greeting_style'
                );
                // Show predefined styles as buttons using Enum
                $keyboard = GreetingStyleEnum::getAllStyles($birthday->id);
                $this->telegramBot->sendMessage(
                    $chatId,
                    '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:',
                    ['inline_keyboard' => $keyboard]
                );
                $this->telegramBot->answerCallbackQuery($callback->getId(), '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å');
            } else {
                $this->telegramBot->answerCallbackQuery($callback->getId(), '‚ùå –ò–º–µ–Ω–∏–Ω–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        }

        \Illuminate\Support\Facades\Log::info($data);

        // Handle predefined style selections
        $pattern = implode('|', array_map(fn($e) => $e->value, GreetingStyleEnum::cases()));
        if (preg_match('/^style_(' . $pattern . ')_(\d+)$/', $data, $m)) {
            $style = $m[1];
            $birthdayId = (int)$m[2];
            $birthday = Birthday::find($birthdayId);
            if (!$birthday) {
                $this->telegramBot->sendMessage($chatId, '‚ùå –ò–º–µ–Ω–∏–Ω–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                $this->telegramBot->answerCallbackQuery($callback->getId(), '‚ùå –û—à–∏–±–∫–∞');
                return;
            }
            if ($style === 'custom') {
                // Set state to await custom style input
                $this->stateService->updateStateWithTempNameAndUsername(
                    $userId,
                    $birthday->name,
                    $birthday->telegram_username,
                    'awaiting_greeting_style'
                );
                $this->telegramBot->sendMessage(
                    $chatId,
                    '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:'
                );
                $this->telegramBot->answerCallbackQuery($callback->getId(), '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∏–ª—å');
                return;
            }
            // Get style from Enum
            $greetingStyle = GreetingStyleEnum::fromString($style);
            if (!$greetingStyle) {
                $this->telegramBot->sendMessage($chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è');
                $this->telegramBot->answerCallbackQuery($callback->getId(), '‚ùå –û—à–∏–±–∫–∞');
                return;
            }
            $styleText = $greetingStyle->getRussianDescription();
            try {
                $openAIService = new OpenAIService();
                $greeting = $openAIService->generateBirthdayGreeting($birthday->name, $styleText);
                // Send greeting to birthday person
                $birthdayChatId = $birthday->birthday_chat_id;
                if ($birthdayChatId) {
                    $this->telegramBot->sendMessage($birthdayChatId, $greeting);
                    $this->telegramBot->answerCallbackQuery($callback->getId(), 'ü§ñ –ò–ò-–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                } else {
                    $greetingWithMention = $greeting;
                    if ($birthday->telegram_username) {
                        $greetingWithMention .= PHP_EOL . PHP_EOL . '–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å https://t.me/' . $birthday->telegram_username;
                    }
                    $this->telegramBot->sendMessage($chatId, $greetingWithMention, ['parse_mode' => 'Markdown']);
                    $this->telegramBot->answerCallbackQuery($callback->getId(), 'ü§ñ –ò–ò-–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!');
                }
            } catch (\Exception $e) {
                $this->telegramBot->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: ' . $e->getMessage());
                $this->telegramBot->answerCallbackQuery($callback->getId(), '‚ùå –û—à–∏–±–∫–∞');
            }
        }
    }

    private function getChatIdByUsername(?string $username): ?int
    {
        if (!$username) {
            return null;
        }
        $birthday = Birthday::where('telegram_username', $username)->first();
        return $birthday ? $birthday->birthday_chat_id : null;
    }

    /**
     * Normalize Telegram username by removing @ symbol if present
     */
    private function normalizeUsername(string $username): string
    {
        return ltrim($username, '@');
    }
}
