<?php

namespace Classes;

class WebhookHandler
{
    private TelegramBot $telegramBot;
    private Database $database;
    private UserStateManager $stateManager;
    private BirthdayManager $birthdayManager;

    public function __construct(
        TelegramBot $telegramBot,
        Database $database,
        UserStateManager $stateManager,
        BirthdayManager $birthdayManager
    ) {
        $this->telegramBot = $telegramBot;
        $this->database = $database;
        $this->stateManager = $stateManager;
        $this->birthdayManager = $birthdayManager;
    }

    public function getTelegramBot(): TelegramBot
    {
        return $this->telegramBot;
    }

    public function handleUpdate($update): void
    {
        if ($update->isType('message')) {
            $this->handleMessage($update->getMessage());
        } elseif ($update->isType('callback_query')) {
            $this->handleCallbackQuery($update->getCallbackQuery());
        }
    }

    private function handleMessage($message): void
    {
        $userId = $message->getFrom()->getId();
        $chatId = $message->getChat()->getId();
        $text = trim($message->getText());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ chat_id
        $this->database->saveUser($userId, $chatId);

        if ($text === '/add') {
            $this->stateManager->setState($userId, 'awaiting_name');
            $this->telegramBot->sendMessage($chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞:");
            return;
        }

        if ($text === '/list') {
            $this->birthdayManager->listBirthdays($userId, $chatId);
            return;
        }

        $state = $this->stateManager->getState($userId);

        if ($state && $state['state'] === 'awaiting_name') {
            $this->stateManager->updateStateWithTempName($userId, $text, 'awaiting_username');
            $this->telegramBot->sendMessage($chatId, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram username –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ (–±–µ–∑ @) –∏–ª–∏ –µ–≥–æ chat_id:");
            return;
        }

        if ($state && $state['state'] === 'awaiting_username') {
            $input = trim($text);
            if (empty($input)) {
                $this->telegramBot->sendMessage($chatId, "‚ùå –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ Telegram username (–±–µ–∑ @) –∏–ª–∏ chat_id:");
                return;
            }

            $birthdayChatId = null;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–º (chat_id)
            if (is_numeric($input)) {
                $birthdayChatId = (int) $input;
            } else {
                // –≠—Ç–æ username, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id
                $birthdayChatId = $this->telegramBot->getChatIdByUsername($input);
            }

            if (!$birthdayChatId) {
                $this->telegramBot->sendMessage($chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram username (–±–µ–∑ @) –∏–ª–∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:");
                return;
            }

            $this->stateManager->updateStateWithTempNameUsernameAndChatId($userId, $state['temp_name'], $input, $birthdayChatId, 'awaiting_date');
            $this->telegramBot->sendMessage($chatId, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:");
            return;
        }

        if ($state && $state['state'] === 'awaiting_date') {
            if (!$this->birthdayManager->validateDate($text)) {
                $this->telegramBot->sendMessage($chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:");
                return;
            }

            $this->birthdayManager->addBirthday($userId, $chatId, $state['temp_name'], $state['temp_username'], $state['temp_birthday_chat_id'], $text);
            $this->stateManager->clearState($userId);
            return;
        }

        $this->telegramBot->sendMessage($chatId, "–ö–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ");
    }

    private function handleCallbackQuery($callback): void
    {
        $data = $callback->getData();
        $userId = $callback->getFrom()->getId();
        $chatId = $callback->getMessage()->getChat()->getId();

        if (preg_match('/^delete_(\d+)$/', $data, $matches)) {
            $id = (int) $matches[1];
            $this->birthdayManager->deleteBirthday($id, $userId, $chatId, $callback->getId());
        }

        if (preg_match('/^greet_(.+)_(.+)$/', $data, $m)) {
            $name = urldecode($m[1]);
            $username = urldecode($m[2]);

            $greeting = "üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {$name}!\n–ñ–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Ç–µ–ø–ª–∞!";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É
            $birthdayChatId = $this->database->getChatIdByUsername($username);
            if ($birthdayChatId) {
                $this->telegramBot->sendMessage($birthdayChatId, $greeting);
                $this->telegramBot->answerCallbackQuery($callback->getId(), 'üì® –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
            } else {
                $this->telegramBot->answerCallbackQuery($callback->getId(), '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ');
            }
        }
    }
}
